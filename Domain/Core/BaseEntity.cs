using System;
using System.Collections.Generic;
using System.Text;

namespace Domain.Core
{
    public abstract class BaseEntity<TKey>
    {
        public virtual TKey Id { get; set; }

        //commentary:
        //the hash code is stored because if the entity is added to a HashSet like collection BEFORE
        //it is persisted, the HashSet like collection will use the hash generated by the runtime, which
        //isn't equal to the persisted Id hash; if the hash would be computed each time it is asked, 
        //the entity from the previous scenario couldn't be removed from the collection
        //tl;dr: hashes should be immutable for the duration of an object's lifetime
        private int? _lazyHashCode;

        public override bool Equals(object obj)
        {
            return Equals(obj as BaseEntity<TKey>);
        }

        private static bool IsTransient(BaseEntity<TKey> obj)
        {
            return obj != null && Equals(obj.Id, default(TKey));
        }

        private Type GetUnproxiedType()
        {
            return GetType();
        }

        public virtual bool Equals(BaseEntity<TKey> other)
        {
            if (other == null)
                return false;

            if (ReferenceEquals(this, other))
                return true;

            if (!IsTransient(this) &&
                !IsTransient(other) &&
                Equals(Id, other.Id))
            {
                var otherType = other.GetUnproxiedType();
                var thisType = GetUnproxiedType();
                return thisType.IsAssignableFrom(otherType) ||
                        otherType.IsAssignableFrom(thisType);
            }

            return false;
        }

        public override int GetHashCode()
        {
            if (!_lazyHashCode.HasValue)
                _lazyHashCode = InternalGetHashCode();
            return _lazyHashCode.Value;
        }

        private int InternalGetHashCode()
        {
            if (Equals(Id, default(TKey)))
                return base.GetHashCode();
            return Id.GetHashCode();
        }

        public static bool operator ==(BaseEntity<TKey> x, BaseEntity<TKey> y)
        {
            return Equals(x, y);
        }

        public static bool operator !=(BaseEntity<TKey> x, BaseEntity<TKey> y)
        {
            return !(x == y);
        }
    }
}
