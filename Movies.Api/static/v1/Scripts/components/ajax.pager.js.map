{"version":3,"sources":["ajax.pager.es6.js"],"names":["window","_proxy","getInterceptor","object","propertyName","attr","_data","undefined","_computedAttrs","setInterceptor","value","updatePostfixAddInterceptor","original","updatePostfixSubtractInterceptor","extend","tag","template","viewModel","prev","limit","next","changePage","pageNumber","isToggled","checked","indexOf","toggle","push","splice","define","selectedRows","Value","can","Type","additionalData","additionalDataName","type","read","readType","loading","get","_lastSet","resolve","promise","state","always","paginatedItems","done","data","requestOptions","ajaxOptions","url","method","traditional","dataType","contentType","serialize","result","JSON","stringify","request","_requestOptions","count","offset","limitName","currentPageName","canNext","cannext","canPrev","canprev","currentPage","Math","floor","set","newVal","parseInt","pageCount","ceil","hasPages","pageLimit","pages","pageOffset","hasNonPage","_","times","i","pageTitle","isActive","isPage","events","trigger","selectedIds","resetGrid"],"mappings":"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","file":"ajax.pager.js","sourcesContent":["import can from 'can.full';\r\nimport $ from 'jquery';\r\nimport _ from 'underscore';\r\nimport http from 'services/http';\r\n\r\nexport default can.Component.extend({\r\n    tag: \"ajax-pager\",\r\n    template: \"<content/>\",\r\n    viewModel: can.Map.extend({\r\n        prev: function () {\r\n            if (this.canPrev === true) {\r\n                this.offset = this.offset - limit;\r\n            }\r\n        },\r\n        next: function () {\r\n            if (this.canNext === true) {\r\n                this.offset = this.offset + this.limit;\r\n            }\r\n        },\r\n        changePage: function (pageNumber) {\r\n            this.currentPage = pageNumber;\r\n            return false;\r\n        },\r\n        isToggled: function (value) {\r\n            let checked = this.selectedRows.indexOf(value);\r\n            //set checked based on if current checkbox's value is in selectedIds.\r\n            return checked > -1;\r\n        },\r\n        toggle: function (value, toggle) {\r\n            if (toggle !== undefined && toggle !== null) {\r\n                if (toggle === true) {\r\n                    let checked = this.selectedRows.indexOf(value);\r\n                    if (checked === -1) {\r\n                        //add id to selectedIds.\r\n                        this.selectedRows.push(value);\r\n                    }\r\n                }\r\n                else {\r\n                    let checked = this.selectedRows.indexOf(value);\r\n                    if (checked > -1) {\r\n                        //remove id from selectedIds.\r\n                        this.selectedRows.splice(checked, 1);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let checked = this.selectedRows.indexOf(value);\r\n                if (checked === -1) {\r\n                    //add id to selectedIds.\r\n                    this.selectedRows.push(value);\r\n                }\r\n                else {\r\n                    this.selectedRows.splice(checked, 1);\r\n                }\r\n            }\r\n        },\r\n        define: {\r\n            selectedRows: {\r\n                Value: can.List,\r\n                Type: can.List\r\n            },\r\n            additionalData: {\r\n                value: null\r\n            },\r\n            additionalDataName: {\r\n                type: \"string\",\r\n                value: null\r\n            },\r\n            read: {\r\n                type: \"string\",\r\n                value: null\r\n            },\r\n            readType: {\r\n                type: \"string\",\r\n                value: \"POST\"\r\n            },\r\n            loading: {\r\n                get: function (_lastSet, resolve) {\r\n                    let promise = this.request;\r\n\r\n                    if (promise.state() === \"pending\") {\r\n                        promise.always(function () {\r\n                            resolve(false);\r\n                        });\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n            },\r\n            paginatedItems: {\r\n                get: function (_lastSet, resolve) {\r\n                    let promise = this.request;\r\n\r\n                    promise.done((data) => {\r\n                        this.count = data.totalCount;\r\n                        resolve(data.items);\r\n                    });\r\n                }\r\n            },\r\n            requestOptions: {\r\n                type: '*',\r\n                get: function () {\r\n                    let ajaxOptions = {\r\n                        url: this.read,\r\n                        method: this.readType,\r\n                        traditional: true,\r\n                        dataType: this.dataType,\r\n                        contentType: this.contentType\r\n                    };\r\n                    let data = this.additionalData;\r\n                    if (data === null) {\r\n                        data = {};\r\n                    }\r\n                    if (data.serialize)\r\n                        data = data.serialize();\r\n                    if (this.additionalDataName) {\r\n                        var result = {};\r\n                        result[this.additionalDataName] = data;\r\n                        ajaxOptions.data = result;\r\n                    }\r\n                    else {\r\n                        ajaxOptions.data = data;\r\n                    }\r\n                    ajaxOptions.data[this.limitName] = this.limit;\r\n                    ajaxOptions.data[this.currentPageName] = this.currentPage;\r\n                    if (this.stringify) {\r\n                        ajaxOptions.data = JSON.stringify(ajaxOptions.data);\r\n                    }\r\n                    return ajaxOptions;\r\n                }\r\n            },\r\n            request: {\r\n                get: function (_requestOptions) {\r\n                    return http(this.requestOptions);\r\n                }\r\n            },\r\n            count: {\r\n                type: \"number\",\r\n                value: 0\r\n            },\r\n            offset: {\r\n                type: \"number\",\r\n                value: 0\r\n            },\r\n            limit: {\r\n                type: \"number\",\r\n                value: 10\r\n            },\r\n            limitName: {\r\n                type: 'string',\r\n                value: 'limit'\r\n            },\r\n            currentPageName: {\r\n                type: 'string',\r\n                value: 'currentPage'\r\n            },\r\n            dataType: {\r\n                type: 'string',\r\n                value: 'json'\r\n            },\r\n            contentType: {\r\n                type: 'string',\r\n                value: 'application/x-www-form-urlencoded; charset=UTF-8'\r\n            },\r\n            stringify: {\r\n                type: 'boolean',\r\n                value: false\r\n            },\r\n            canNext: {\r\n                get: function () {\r\n                    let cannext = this.offset < this.count - this.limit;\r\n                    return cannext;\r\n                }\r\n            },\r\n            canPrev: {\r\n                get: function () {\r\n                    let canprev = this.offset > 0;\r\n                    return canprev;\r\n                }\r\n            },\r\n            currentPage: {\r\n                get: function () {\r\n                    return Math.floor(this.offset / this.limit) + 1;\r\n                },\r\n                set: function (newVal) {\r\n                    this.offset = (parseInt(newVal, 10) - 1) * this.limit;\r\n                }\r\n            },\r\n            pageCount: {\r\n                get: function () {\r\n                    return this.count ?\r\n                        Math.ceil(this.count / this.limit) : null;\r\n                }\r\n            },\r\n            hasPages: {\r\n                get: function () {\r\n                    return this.pageCount > 1;\r\n                }\r\n            },\r\n            pageLimit: {\r\n                type: \"number\",\r\n                value: 10\r\n            },\r\n            pages: {\r\n                get: function () {\r\n                    let currentPage = this.currentPage;\r\n                    let pageCount = this.pageLimit;\r\n                    let pageOffset = currentPage - (pageCount / 2) > 0 ? Math.ceil(currentPage - (pageCount / 2)) : 0;\r\n                    let hasNonPage = true;\r\n                    if (pageOffset + pageCount > this.pageCount) {\r\n                        pageCount = this.pageCount - pageOffset;\r\n                        hasNonPage = false;\r\n                    }\r\n                    return new can.List(_.times(hasNonPage ? pageCount + 1 : pageCount, function (i) {\r\n                        if (i < pageCount) {\r\n                            return {\r\n                                pageNumber: pageOffset + i,\r\n                                pageTitle: pageOffset + i + 1,\r\n                                isActive: pageOffset + i + 1 === currentPage,\r\n                                isPage: true\r\n                            };\r\n                        }\r\n                        else {\r\n                            return {\r\n                                pageTitle: '...',\r\n                                isPage: false\r\n                            };\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    events: {\r\n        '{selectedRows} change': function () {\r\n            this.element.trigger('selectedrows', [{ selectedIds: this.viewModel.selectedRows.attr() }]);\r\n        },\r\n        '{element} refresh': function () {\r\n            this.viewModel.request = this.viewModel.requestOptions;\r\n        },\r\n        '{element} clear': function () {\r\n            this.viewModel.selectedRows = [];\r\n            this.element.trigger('refresh');\r\n        },\r\n        \"{viewModel} additionalData set\": 'resetGrid',\r\n        \"{additionalData} change\": 'resetGrid',\r\n        resetGrid: function () {\r\n            this.viewModel.currentPage = 1;\r\n        }\r\n    }\r\n});\r\n"]}