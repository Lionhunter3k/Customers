{"version":3,"sources":["pager.es6.js"],"names":["window","_proxy","getInterceptor","object","propertyName","attr","_data","setInterceptor","value","updatePostfixAddInterceptor","original","updatePostfixSubtractInterceptor","extend","tag","template","viewModel","Prev","Next","ChangePage","pageNumber","isToggled","checked","indexOf","toggle","undefined","push","splice","define","selectedRows","Value","can","Type","items","PaginatedItems","get","pagedResults","Enumerable","From","Skip","Take","ToArray","Count","Offset","type","limit","CanNext","cannext","CanPrev","canprev","CurrentPage","Math","floor","set","newVal","parseInt","PageCount","ceil","HasPages","pageLimit","Pages","currentPage","pageCount","pageOffset","hasNonPage","_","times","i","pageTitle","isActive","isPage","events","trigger","selectedIds","serialize"],"mappings":"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","file":"pager.js","sourcesContent":["ï»¿import can from \"can.full\";\r\nimport $ from \"jquery\";\r\nimport _ from 'underscore';\r\n\r\nexport default can.Component.extend({\r\n    tag: \"pager\",\r\n    template: \"<content/>\",\r\n    viewModel: can.Map.extend({\r\n        Prev: function () {\r\n            if (this.CanPrev === true) {\r\n                this.Offset = this.Offset - this.limit;\r\n            }\r\n        },\r\n        Next: function () {\r\n            if (this.CanNext === true) {\r\n                this.Offset = this.Offset + this.limit;\r\n            }\r\n        },\r\n        ChangePage: function (pageNumber) {\r\n            this.CurrentPage = pageNumber;\r\n        },\r\n        isToggled: function (value) {\r\n            let checked = this.selectedRows.indexOf(value);\r\n            //set checked based on if current checkbox's value is in selectedIds.\r\n            return checked > -1;\r\n        },\r\n        toggle: function (value, toggle) {\r\n            if (toggle !== undefined && toggle !== null) {\r\n                if (toggle === true) {\r\n                    let checked = this.selectedRows.indexOf(value);\r\n                    if (checked === -1) {\r\n                        //add id to selectedIds.\r\n                        this.selectedRows.push(value);\r\n                    }\r\n                }\r\n                else {\r\n                    let checked = this.selectedRows.indexOf(value);\r\n                    if (checked > -1) {\r\n                        //remove id from selectedIds.\r\n                        this.selectedRows.splice(checked, 1);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let checked = this.selectedRows.indexOf(value);\r\n                if (checked === -1) {\r\n                    //add id to selectedIds.\r\n                    this.selectedRows.push(value);\r\n                }\r\n                else {\r\n                    this.selectedRows.splice(checked, 1);\r\n                }\r\n            }\r\n        },\r\n        define: {\r\n            selectedRows: {\r\n                Value: can.List,\r\n                Type: can.List\r\n            },\r\n            items: {\r\n                Type: can.List,\r\n                Value: can.List\r\n            },\r\n            PaginatedItems: {\r\n                get: function () {\r\n                    if (this.items.length > 0) {\r\n                        let pagedResults = Enumerable.From(this.items).Skip(this.Offset).Take(this.limit).ToArray();\r\n                        return pagedResults;\r\n                    }\r\n                    else\r\n                        return [];\r\n                }\r\n            },\r\n            Count: {\r\n                get: function () {\r\n                    return this.items.length;\r\n                }\r\n            },\r\n            Offset: {\r\n                type: \"number\",\r\n                value: 0\r\n            },\r\n            limit: {\r\n                type: \"number\",\r\n                value: 10\r\n            },\r\n            CanNext: {\r\n                get: function () {\r\n                    let cannext = this.Offset < this.Count - this.limit;\r\n                    return cannext;\r\n                }\r\n            },\r\n            CanPrev: {\r\n                get: function () {\r\n                    let canprev = this.Offset > 0;\r\n                    return canprev;\r\n                }\r\n            },\r\n            CurrentPage: {\r\n                get: function () {\r\n                    return Math.floor(this.Offset / this.limit) + 1;\r\n                },\r\n                set: function (newVal) {\r\n                    this.Offset = (parseInt(newVal, 10) - 1) * this.limit;\r\n                }\r\n            },\r\n            PageCount: {\r\n                get: function () {\r\n                    return this.Count ?\r\n                        Math.ceil(this.Count / this.limit) : null;\r\n                }\r\n            },\r\n            HasPages: {\r\n                get: function () {\r\n                    return this.PageCount > 1;\r\n                }\r\n            },\r\n            pageLimit: {\r\n                type: \"number\",\r\n                value: 10\r\n            },\r\n            Pages: {\r\n                get: function () {\r\n                    let currentPage = this.CurrentPage;\r\n                    let pageCount = this.pageLimit;\r\n                    let pageOffset = currentPage - (pageCount / 2) > 0 ? Math.ceil(currentPage - (pageCount / 2)) : 0;\r\n                    let hasNonPage = true;\r\n                    if (pageOffset + pageCount > this.PageCount) {\r\n                        pageCount = this.PageCount - pageOffset;\r\n                        hasNonPage = false;\r\n                    }\r\n                    return new can.List(_.times(hasNonPage ? pageCount + 1 : pageCount, function (i) {\r\n                        if (i < pageCount) {\r\n                            return {\r\n                                pageNumber: pageOffset + i,\r\n                                pageTitle: pageOffset + i + 1,\r\n                                isActive: pageOffset + i + 1 === currentPage,\r\n                                isPage: true\r\n                            };\r\n                        }\r\n                        else {\r\n                            return {\r\n                                pageTitle: '...',\r\n                                isPage: false\r\n                            };\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    events: {\r\n        '{selectedRows} change': function () {\r\n            this.element.trigger('selectedrows', [{ selectedIds: this.viewModel.selectedRows.serialize() }]);\r\n        },\r\n        '{element} clear': function () {\r\n            this.viewModel.selectedRows = [];\r\n        },\r\n        '{items} add': function () {\r\n            this.viewModel.CurrentPage = 1;\r\n        },\r\n        '{items} remove': function () {\r\n            this.viewModel.CurrentPage = 1;\r\n        },\r\n        \"{viewModel} items set\": function () {\r\n            this.viewModel.CurrentPage = 1;\r\n        }\r\n    }\r\n});"]}