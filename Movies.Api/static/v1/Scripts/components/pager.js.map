{"version":3,"sources":["pager.es6.js"],"names":["window","_proxy","getInterceptor","object","propertyName","attr","_data","undefined","_computedAttrs","setInterceptor","value","updatePostfixAddInterceptor","original","updatePostfixSubtractInterceptor","extend","tag","template","viewModel","prev","next","changePage","pageNumber","isToggled","checked","indexOf","toggle","push","splice","define","selectedRows","Value","can","Type","items","paginatedItems","get","pagedResults","Enumerable","From","Skip","Take","ToArray","count","offset","type","limit","canNext","cannext","canPrev","canprev","currentPage","Math","floor","set","newVal","parseInt","pageCount","ceil","hasPages","pageLimit","pages","pageOffset","hasNonPage","_","times","i","pageTitle","isActive","isPage","events","trigger","selectedIds","serialize"],"mappings":"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","file":"pager.js","sourcesContent":["ï»¿import can from \"can.full\";\r\nimport $ from \"jquery\";\r\nimport _ from 'underscore';\r\n\r\nexport default can.Component.extend({\r\n    tag: \"pager\",\r\n    template: \"<content/>\",\r\n    viewModel: can.Map.extend({\r\n        prev: function () {\r\n            if (this.canPrev === true) {\r\n\t\t\t\tthis.offset = this.offset - this.limit;\r\n            }\r\n        },\r\n        next: function () {\r\n            if (this.canNext === true) {\r\n\t\t\t\tthis.offset = this.offset + this.limit;\r\n            }\r\n        },\r\n        changePage: function (pageNumber) {\r\n            this.currentPage = pageNumber;\r\n        },\r\n        isToggled: function (value) {\r\n            let checked = this.selectedRows.indexOf(value);\r\n            //set checked based on if current checkbox's value is in selectedIds.\r\n            return checked > -1;\r\n        },\r\n        toggle: function (value, toggle) {\r\n            if (toggle !== undefined && toggle !== null) {\r\n                if (toggle === true) {\r\n                    let checked = this.selectedRows.indexOf(value);\r\n                    if (checked === -1) {\r\n                        //add id to selectedIds.\r\n                        this.selectedRows.push(value);\r\n                    }\r\n                }\r\n                else {\r\n                    let checked = this.selectedRows.indexOf(value);\r\n                    if (checked > -1) {\r\n                        //remove id from selectedIds.\r\n                        this.selectedRows.splice(checked, 1);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let checked = this.selectedRows.indexOf(value);\r\n                if (checked === -1) {\r\n                    //add id to selectedIds.\r\n                    this.selectedRows.push(value);\r\n                }\r\n                else {\r\n                    this.selectedRows.splice(checked, 1);\r\n                }\r\n            }\r\n        },\r\n        define: {\r\n            selectedRows: {\r\n                Value: can.List,\r\n                Type: can.List\r\n            },\r\n            items: {\r\n                Type: can.List,\r\n                Value: can.List\r\n            },\r\n            paginatedItems: {\r\n                get: function () {\r\n                    if (this.items.length > 0) {\r\n                        let pagedResults = Enumerable.From(this.items).Skip(this.offset).Take(this.limit).ToArray();\r\n                        return pagedResults;\r\n                    }\r\n                    else\r\n                        return [];\r\n                }\r\n            },\r\n            count: {\r\n                get: function () {\r\n                    return this.items.length;\r\n                }\r\n            },\r\n            offset: {\r\n                type: \"number\",\r\n                value: 0\r\n            },\r\n            limit: {\r\n                type: \"number\",\r\n                value: 10\r\n            },\r\n            canNext: {\r\n                get: function () {\r\n\t\t\t\t\tlet cannext = this.offset < this.count - this.limit;\r\n                    return cannext;\r\n                }\r\n            },\r\n            canPrev: {\r\n                get: function () {\r\n\t\t\t\t\tlet canprev = this.offset > 0;\r\n                    return canprev;\r\n                }\r\n            },\r\n            currentPage: {\r\n                get: function () {\r\n\t\t\t\t\treturn Math.floor(this.offset / this.limit) + 1;\r\n                },\r\n                set: function (newVal) {\r\n\t\t\t\t\tthis.offset = (parseInt(newVal, 10) - 1) * this.limit;\r\n                }\r\n            },\r\n            pageCount: {\r\n                get: function () {\r\n\t\t\t\t\treturn this.count ?\r\n\t\t\t\t\t\tMath.ceil(this.count / this.limit) : null;\r\n                }\r\n            },\r\n            hasPages: {\r\n                get: function () {\r\n\t\t\t\t\treturn this.pageCount > 1;\r\n                }\r\n            },\r\n            pageLimit: {\r\n                type: \"number\",\r\n                value: 10\r\n            },\r\n            pages: {\r\n                get: function () {\r\n                    let currentPage = this.currentPage;\r\n                    let pageCount = this.pageLimit;\r\n                    let pageOffset = currentPage - (pageCount / 2) > 0 ? Math.ceil(currentPage - (pageCount / 2)) : 0;\r\n                    let hasNonPage = true;\r\n                    if (pageOffset + pageCount > this.pageCount) {\r\n                        pageCount = this.pageCount - pageOffset;\r\n                        hasNonPage = false;\r\n                    }\r\n                    return new can.List(_.times(hasNonPage ? pageCount + 1 : pageCount, function (i) {\r\n                        if (i < pageCount) {\r\n                            return {\r\n                                pageNumber: pageOffset + i,\r\n                                pageTitle: pageOffset + i + 1,\r\n                                isActive: pageOffset + i + 1 === currentPage,\r\n                                isPage: true\r\n                            };\r\n                        }\r\n                        else {\r\n                            return {\r\n                                pageTitle: '...',\r\n                                isPage: false\r\n                            };\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    events: {\r\n        '{selectedRows} change': function () {\r\n            this.element.trigger('selectedrows', [{ selectedIds: this.viewModel.selectedRows.serialize() }]);\r\n        },\r\n        '{element} clear': function () {\r\n            this.viewModel.selectedRows = [];\r\n        },\r\n        '{items} add': function () {\r\n            this.viewModel.currentPage = 1;\r\n        },\r\n        '{items} remove': function () {\r\n            this.viewModel.currentPage = 1;\r\n        },\r\n        \"{viewModel} items set\": function () {\r\n            this.viewModel.currentPage = 1;\r\n        }\r\n    }\r\n});"]}